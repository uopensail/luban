# Generated from luban.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
        1,42,1,42,5,42,229,8,42,10,42,12,42,232,9,42,1,43,1,43,1,43,1,43,
        5,43,238,8,43,10,43,12,43,241,9,43,1,43,1,43,1,44,3,44,246,8,44,
        1,44,1,44,1,44,5,44,251,8,44,10,44,12,44,254,9,44,3,44,256,8,44,
        1,45,1,45,1,45,1,45,5,45,262,8,45,10,45,12,45,265,9,45,1,45,1,45,
        1,46,3,46,270,8,46,1,46,1,46,1,46,5,46,275,8,46,10,46,12,46,278,
        9,46,3,46,280,8,46,1,46,1,46,5,46,284,8,46,10,46,12,46,287,9,46,
        1,47,1,47,1,47,1,47,5,47,293,8,47,10,47,12,47,296,9,47,1,47,1,47,
        1,48,1,48,1,48,5,48,303,8,48,10,48,12,48,306,9,48,1,48,1,48,1,49,
        1,49,1,49,3,49,313,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,
        1,52,1,52,1,53,4,53,326,8,53,11,53,12,53,327,1,53,1,53,0,0,54,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,
        53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,
        79,0,81,0,83,0,85,17,87,18,89,19,91,20,93,21,95,22,97,23,99,0,101,
        0,103,0,105,0,107,24,1,0,34,2,0,65,65,97,97,2,0,66,66,98,98,2,0,
        67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,
        2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,
        106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,
        0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,
        113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,
        85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,
        2,0,89,89,121,121,2,0,90,90,122,122,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,8,0,34,34,47,47,92,92,
        98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,
        0,31,34,34,92,92,3,0,9,10,13,13,32,32,315,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,
        0,0,7,115,1,0,0,0,9,117,1,0,0,0,11,119,1,0,0,0,13,121,1,0,0,0,15,
        123,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,0,21,129,1,0,0,0,23,135,
        1,0,0,0,25,143,1,0,0,0,27,150,1,0,0,0,29,157,1,0,0,0,31,166,1,0,
        0,0,33,174,1,0,0,0,35,176,1,0,0,0,37,178,1,0,0,0,39,180,1,0,0,0,
        41,182,1,0,0,0,43,184,1,0,0,0,45,186,1,0,0,0,47,188,1,0,0,0,49,190,
        1,0,0,0,51,192,1,0,0,0,53,194,1,0,0,0,55,196,1,0,0,0,57,198,1,0,
        0,0,59,200,1,0,0,0,61,202,1,0,0,0,63,204,1,0,0,0,65,206,1,0,0,0,
        67,208,1,0,0,0,69,210,1,0,0,0,71,212,1,0,0,0,73,214,1,0,0,0,75,216,
        1,0,0,0,77,218,1,0,0,0,79,220,1,0,0,0,81,222,1,0,0,0,83,224,1,0,
        0,0,85,226,1,0,0,0,87,233,1,0,0,0,89,255,1,0,0,0,91,257,1,0,0,0,
        93,269,1,0,0,0,95,288,1,0,0,0,97,299,1,0,0,0,99,309,1,0,0,0,101,
        314,1,0,0,0,103,320,1,0,0,0,105,322,1,0,0,0,107,325,1,0,0,0,109,
        110,5,40,0,0,110,2,1,0,0,0,111,112,5,41,0,0,112,4,1,0,0,0,113,114,
        5,44,0,0,114,6,1,0,0,0,115,116,5,91,0,0,116,8,1,0,0,0,117,118,5,
        93,0,0,118,10,1,0,0,0,119,120,5,43,0,0,120,12,1,0,0,0,121,122,5,
        45,0,0,122,14,1,0,0,0,123,124,5,42,0,0,124,16,1,0,0,0,125,126,5,
        47,0,0,126,18,1,0,0,0,127,128,5,37,0,0,128,20,1,0,0,0,129,130,3,
        49,24,0,130,131,3,59,29,0,131,132,3,71,35,0,132,133,5,54,0,0,133,
        134,5,52,0,0,134,22,1,0,0,0,135,136,3,43,21,0,136,137,3,55,27,0,
        137,138,3,61,30,0,138,139,3,33,16,0,139,140,3,71,35,0,140,141,5,
        51,0,0,141,142,5,50,0,0,142,24,1,0,0,0,143,144,3,69,34,0,144,145,
        3,71,35,0,145,146,3,67,33,0,146,147,3,49,24,0,147,148,3,59,29,0,
        148,149,3,45,22,0,149,26,1,0,0,0,150,151,3,49,24,0,151,152,3,59,
        29,0,152,153,3,71,35,0,153,154,5,54,0,0,154,155,5,52,0,0,155,156,
        3,69,34,0,156,28,1,0,0,0,157,158,3,43,21,0,158,159,3,55,27,0,159,
        160,3,61,30,0,160,161,3,33,16,0,161,162,3,71,35,0,162,163,5,51,0,
        0,163,164,5,50,0,0,164,165,3,69,34,0,165,30,1,0,0,0,166,167,3,69,
        34,0,167,168,3,71,35,0,168,169,3,67,33,0,169,170,3,49,24,0,170,171,
        3,59,29,0,171,172,3,45,22,0,172,173,3,69,34,0,173,32,1,0,0,0,174,
        175,7,0,0,0,175,34,1,0,0,0,176,177,7,1,0,0,177,36,1,0,0,0,178,179,
        7,2,0,0,179,38,1,0,0,0,180,181,7,3,0,0,181,40,1,0,0,0,182,183,7,
        4,0,0,183,42,1,0,0,0,184,185,7,5,0,0,185,44,1,0,0,0,186,187,7,6,
        0,0,187,46,1,0,0,0,188,189,7,7,0,0,189,48,1,0,0,0,190,191,7,8,0,
        0,191,50,1,0,0,0,192,193,7,9,0,0,193,52,1,0,0,0,194,195,7,10,0,0,
        195,54,1,0,0,0,196,197,7,11,0,0,197,56,1,0,0,0,198,199,7,12,0,0,
        199,58,1,0,0,0,200,201,7,13,0,0,201,60,1,0,0,0,202,203,7,14,0,0,
        203,62,1,0,0,0,204,205,7,15,0,0,205,64,1,0,0,0,206,207,7,16,0,0,
        207,66,1,0,0,0,208,209,7,17,0,0,209,68,1,0,0,0,210,211,7,18,0,0,
        211,70,1,0,0,0,212,213,7,19,0,0,213,72,1,0,0,0,214,215,7,20,0,0,
        215,74,1,0,0,0,216,217,7,21,0,0,217,76,1,0,0,0,218,219,7,22,0,0,
        219,78,1,0,0,0,220,221,7,23,0,0,221,80,1,0,0,0,222,223,7,24,0,0,
        223,82,1,0,0,0,224,225,7,25,0,0,225,84,1,0,0,0,226,230,7,26,0,0,
        227,229,7,27,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,
        230,231,1,0,0,0,231,86,1,0,0,0,232,230,1,0,0,0,233,234,5,40,0,0,
        234,239,3,89,44,0,235,236,5,44,0,0,236,238,3,89,44,0,237,235,1,0,
        0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,1,0,
        0,0,241,239,1,0,0,0,242,243,5,41,0,0,243,88,1,0,0,0,244,246,5,45,
        0,0,245,244,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,256,5,48,
        0,0,248,252,7,28,0,0,249,251,7,29,0,0,250,249,1,0,0,0,251,254,1,
        0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,256,1,0,0,0,254,252,1,
        0,0,0,255,245,1,0,0,0,255,248,1,0,0,0,256,90,1,0,0,0,257,258,5,40,
        0,0,258,263,3,93,46,0,259,260,5,44,0,0,260,262,3,93,46,0,261,259,
        1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,
        1,0,0,0,265,263,1,0,0,0,266,267,5,41,0,0,267,92,1,0,0,0,268,270,
        5,45,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,279,1,0,0,0,271,280,
        5,48,0,0,272,276,7,28,0,0,273,275,7,29,0,0,274,273,1,0,0,0,275,278,
        1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,280,1,0,0,0,278,276,
        1,0,0,0,279,271,1,0,0,0,279,272,1,0,0,0,280,281,1,0,0,0,281,285,
        5,46,0,0,282,284,7,29,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,
        1,0,0,0,285,286,1,0,0,0,286,94,1,0,0,0,287,285,1,0,0,0,288,289,5,
        40,0,0,289,294,3,97,48,0,290,291,5,44,0,0,291,293,3,97,48,0,292,
        290,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,
        297,1,0,0,0,296,294,1,0,0,0,297,298,5,41,0,0,298,96,1,0,0,0,299,
        304,5,34,0,0,300,303,3,99,49,0,301,303,3,105,52,0,302,300,1,0,0,
        0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,
        0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,34,0,0,308,98,1,0,0,
        0,309,312,5,92,0,0,310,313,7,30,0,0,311,313,3,101,50,0,312,310,1,
        0,0,0,312,311,1,0,0,0,313,100,1,0,0,0,314,315,5,117,0,0,315,316,
        3,103,51,0,316,317,3,103,51,0,317,318,3,103,51,0,318,319,3,103,51,
        0,319,102,1,0,0,0,320,321,7,31,0,0,321,104,1,0,0,0,322,323,8,32,
        0,0,323,106,1,0,0,0,324,326,7,33,0,0,325,324,1,0,0,0,326,327,1,0,
        0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,6,53,
        0,0,330,108,1,0,0,0,16,0,230,239,245,252,255,263,269,276,279,285,
        294,302,304,312,327,1,6,0,0
    ]

class lubanLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T_ADD = 6
    T_SUB = 7
    T_MUL = 8
    T_DIV = 9
    T_MOD = 10
    T_INT = 11
    T_FLOAT = 12
    T_STRING = 13
    T_INTS = 14
    T_FLOATS = 15
    T_STRINGS = 16
    IDENTIFIER = 17
    INTEGER_LIST = 18
    INTEGER = 19
    DECIMAL_LIST = 20
    DECIMAL = 21
    STRING_LIST = 22
    STRING = 23
    WS = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'['", "']'", "'+'", "'-'", "'*'", "'/'", 
            "'%'" ]

    symbolicNames = [ "<INVALID>",
            "T_ADD", "T_SUB", "T_MUL", "T_DIV", "T_MOD", "T_INT", "T_FLOAT", 
            "T_STRING", "T_INTS", "T_FLOATS", "T_STRINGS", "IDENTIFIER", 
            "INTEGER_LIST", "INTEGER", "DECIMAL_LIST", "DECIMAL", "STRING_LIST", 
            "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T_ADD", "T_SUB", 
                  "T_MUL", "T_DIV", "T_MOD", "T_INT", "T_FLOAT", "T_STRING", 
                  "T_INTS", "T_FLOATS", "T_STRINGS", "A", "B", "C", "D", 
                  "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", 
                  "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", 
                  "IDENTIFIER", "INTEGER_LIST", "INTEGER", "DECIMAL_LIST", 
                  "DECIMAL", "STRING_LIST", "STRING", "ESC", "UNICODE", 
                  "HEX", "SAFECODEPOINT", "WS" ]

    grammarFileName = "luban.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


